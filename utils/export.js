export function exportStoryPlan({ userProfile, canvasData, chatHistory }) {
  // Generate the story plan content
  const content = generateStoryPlanContent({ userProfile, canvasData, chatHistory });
  
  // Create and download the file
  downloadAsWordDoc(content, `${userProfile.name}_Story_Plan.doc`);
}

function generateStoryPlanContent({ userProfile, canvasData, chatHistory }) {
  const timestamp = new Date().toLocaleDateString();
  
  let content = `STORY PLAN
Generated by Lulu Muse on ${timestamp}
Writer: ${userProfile.name}

═══════════════════════════════════════════════════════════════

STORY OVERVIEW

${generateStoryOverview(canvasData)}

═══════════════════════════════════════════════════════════════

CHARACTER DEVELOPMENT

${formatCanvasSection('CHARACTER', canvasData.character, {
  protagonist: 'Main Character',
  antagonist: 'Antagonist/Opposition', 
  supporting: 'Supporting Characters'
})}

═══════════════════════════════════════════════════════════════

PLOT STRUCTURE

${formatCanvasSection('PLOT', canvasData.plot, {
  actI: 'Act I - Setup & Inciting Incident',
  actII: 'Act II - Rising Action & Conflicts',
  actIII: 'Act III - Climax & Resolution'
})}

═══════════════════════════════════════════════════════════════

WORLD & SETTING

${formatCanvasSection('WORLD', canvasData.world, {
  setting: 'Setting & Time Period',
  history: 'Background & History',
  rules: 'World Rules & Constraints'
})}

═══════════════════════════════════════════════════════════════

THEMES & MEANING

${formatCanvasSection('THEMES', canvasData.themes, {
  central: 'Central Theme',
  symbolism: 'Symbolism & Metaphors',
  message: 'Core Message'
})}

═══════════════════════════════════════════════════════════════

VOICE & STYLE

${formatCanvasSection('VOICE', canvasData.voice, {
  tone: 'Tone & Atmosphere',
  style: 'Writing Style',
  pov: 'Point of View & Narration'
})}

═══════════════════════════════════════════════════════════════

WRITER PROFILE

Creative Style: ${userProfile.writerType === 'explorer' ? 'Explorer/Pantser' : 'Architect/Planner'}
Process Style: ${userProfile.processStyle}
Story Focus: ${userProfile.storyDrive}-driven
Key Strengths: ${userProfile.strengths.join(', ')}

Personality Insights:
- Primary Mode: ${userProfile.insights?.primaryMode || 'Balanced'}
- Conversation Style: ${userProfile.insights?.conversationStyle || 'Adaptive'}
- Structure Preference: ${userProfile.insights?.structurePreference || 'Flexible'}

═══════════════════════════════════════════════════════════════

DEVELOPMENT SESSION LOG

${formatChatHistory(chatHistory, userProfile.name)}

═══════════════════════════════════════════════════════════════

NEXT STEPS & RECOMMENDATIONS

Based on your creative profile and story development:

${generateRecommendations(userProfile, canvasData)}

═══════════════════════════════════════════════════════════════

Generated by Lulu Muse - AI-Powered Story Development
Continue developing this story in Lulu Editor for detailed writing assistance.
`;

  return content;
}

function generateStoryOverview(canvasData) {
  // Create a brief overview from the most developed sections
  let overview = '';
  
  if (canvasData.character?.protagonist) {
    overview += `This story follows ${canvasData.character.protagonist}`;
  }
  
  if (canvasData.world?.setting) {
    overview += overview ? `, set in ${canvasData.world.setting}` : `Set in ${canvasData.world.setting}`;
  }
  
  if (canvasData.plot?.actI) {
    overview += overview ? `. ${canvasData.plot.actI}` : canvasData.plot.actI;
  }
  
  if (canvasData.themes?.central) {
    overview += ` The story explores themes of ${canvasData.themes.central}`;
  }
  
  return overview || 'Story overview will develop as you continue planning with Lulu.';
}

function formatCanvasSection(title, sectionData, labelMap) {
  if (!sectionData || Object.keys(sectionData).length === 0) {
    return `${title}: [To be developed]

`;
  }
  
  let formatted = '';
  
  Object.entries(labelMap).forEach(([key, label]) => {
    const content = sectionData[key];
    if (content && content.trim()) {
      formatted += `${label}:
${content.trim()}

`;
    } else {
      formatted += `${label}: [To be developed]

`;
    }
  });
  
  return formatted;
}

function formatChatHistory(chatHistory, userName) {
  if (!chatHistory || chatHistory.length === 0) {
    return '[No conversation recorded]';
  }
  
  return chatHistory
    .map(message => {
      const speaker = message.sender === 'user' ? userName : 'Lulu';
      const timestamp = new Date(message.timestamp).toLocaleTimeString([], { 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      return `[${timestamp}] ${speaker}: ${message.message}`;
    })
    .join('\n\n');
}

function generateRecommendations(userProfile, canvasData) {
  let recommendations = [];
  
  // Analyze completion levels
  const completionLevels = {};
  Object.keys(canvasData).forEach(category => {
    const filledSections = Object.values(canvasData[category] || {}).filter(v => v?.trim()).length;
    const totalSections = Object.keys(canvasData[category] || {}).length;
    completionLevels[category] = filledSections / totalSections;
  });
  
  // Find least developed areas
  const leastDeveloped = Object.entries(completionLevels)
    .sort(([,a], [,b]) => a - b)
    .slice(0, 2)
    .map(([category]) => category);
  
  if (leastDeveloped.length > 0) {
    recommendations.push(`Focus Areas: Continue developing your ${leastDeveloped.join(' and ')} elements.`);
  }
  
  // Personality-based recommendations
  if (userProfile.writerType === 'explorer') {
    recommendations.push('Exploration Approach: Let your story evolve organically. Use this plan as a flexible guide, not a rigid structure.');
    recommendations.push('Next Session: Return to Lulu and explore whatever aspect excites you most right now.');
  } else {
    recommendations.push('Structured Approach: Use this plan to create detailed outlines for each section before writing.');
    recommendations.push('Next Session: Systematically develop each underdeveloped area with Lulu.');
  }
  
  // Content-specific recommendations
  if (canvasData.character?.protagonist && !canvasData.character?.antagonist) {
    recommendations.push('Character Development: Define what opposes your protagonist - this could be a person, situation, or internal conflict.');
  }
  
  if (canvasData.world?.setting && !canvasData.world?.rules) {
    recommendations.push('World Building: Establish the rules and constraints of your story world.');
  }
  
  if (canvasData.plot?.actI && !canvasData.plot?.actIII) {
    recommendations.push('Plot Development: Consider how you want your story to end - this will help guide the middle sections.');
  }
  
  recommendations.push('Continue in Lulu Editor: Import this story foundation into Lulu\'s writing editor for detailed chapter development and line-by-line editing assistance.');
  
  return recommendations.join('\n\n');
}

function downloadAsWordDoc(content, filename) {
  // Create HTML content with Word-compatible formatting
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${filename}</title>
    <style>
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.5;
            margin: 1in;
            color: #000;
        }
        h1 {
            font-size: 18pt;
            font-weight: bold;
            text-align: center;
            margin-bottom: 24pt;
        }
        h2 {
            font-size: 14pt;
            font-weight: bold;
            margin-top: 18pt;
            margin-bottom: 12pt;
            border-bottom: 1px solid #ccc;
            padding-bottom: 6pt;
        }
        h3 {
            font-size: 12pt;
            font-weight: bold;
            margin-top: 12pt;
            margin-bottom: 6pt;
        }
        p {
            margin-bottom: 12pt;
            text-align: justify;
        }
        .separator {
            text-align: center;
            margin: 24pt 0;
            font-family: monospace;
        }
        .chat-log {
            font-family: 'Courier New', monospace;
            font-size: 10pt;
            background-color: #f8f8f8;
            padding: 12pt;
            margin: 12pt 0;
        }
        .metadata {
            font-size: 10pt;
            color: #666;
            font-style: italic;
        }
    </style>
</head>
<body>
    ${formatContentForWord(content)}
</body>
</html>
`;

  // Create blob and download
  const blob = new Blob([htmlContent], { 
    type: 'application/msword' 
  });
  
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  link.style.display = 'none';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  window.URL.revokeObjectURL(url);
}

function formatContentForWord(content) {
  return content
    // Convert main title
    .replace(/^STORY PLAN\n/, '<h1>STORY PLAN</h1>\n')
    // Convert section headers
    .replace(/^([A-Z &]+)\n\n/gm, '<h2>$1</h2>\n')
    // Convert subsection headers
    .replace(/^([A-Za-z\s\-&:]+):\n/gm, '<h3>$1:</h3>\n')
    // Convert separators
    .replace(/═+/g, '<div class="separator">═══════════════════════════════════════</div>')
    // Convert paragraphs
    .replace(/\n\n/g, '</p><p>')
    // Handle chat log formatting
    .replace(/\[([\d:]+)\]\s+([^:]+):\s+([^\n]+)/g, '<div class="chat-log">[$1] <strong>$2:</strong> $3</div>')
    // Wrap in paragraphs
    .replace(/^(?!<[h\d]|<div)([^\n]+)/gm, '<p>$1')
    // Close paragraphs
    .replace(/([^>])\n(?!<)/gm, '$1</p>\n')
    // Clean up extra tags
    .replace(/<p><\/p>/g, '')
    .replace(/<p>(<h[123])/g, '$1')
    .replace(/(<\/h[123]>)<\/p>/g, '$1');
}